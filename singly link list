package singly_link_list;

public class sll {
    private ListNode head;
    private static class ListNode{
        private int data;
        private ListNode next;
        public ListNode(int data){
            this.data=data;
            this.next=null;
        }
    }
    public void display(){
        ListNode current=head;
        while (current!=null){
            System.out.println(current.data+"->");
            current=current.next;
        }
        System.out.println("null");
    }

    public int length(){
        if(head==null){
            return 0;
        }
        int count=0;
        ListNode current=head;
        while(current!=null){
            count++;
            current=current.next;
        }
        return count;
    }
    public void insertfirst(int data){
        ListNode newNode=new ListNode(data);
        newNode.next=head;
        head=newNode;
    }
    public void insertLast(int data){
        ListNode newNode=new ListNode(data);
        if(head==null){
            head=newNode;
            return;
        }
        ListNode current=head;
        while (current.next!=null){
            current=current.next;
        }
        current.next=newNode;
    }
    public void insertatpos(int pos,int data){
        ListNode node =new ListNode(data);
        if(pos==1){
            node.next=head;
            head=node;
        }else {
            ListNode previous=head;
            int count=1;
            while (count<pos-1){
                previous=previous.next;
                count++;
            }
            ListNode current=previous.next;
            previous.next=node;
            node.next=current;

        }
    }
    public void delete(int pos){
        if(pos==1){
            head=head.next;
        }else {
            ListNode previous=head;
            int count=1;
            while (count<pos-1){
                previous=previous.next;
                count++;
            }
            ListNode current=previous.next;
            previous.next=current.next;
        }
    }
    public boolean search(int key){
        ListNode current=head;
        while (current!=null){
            if (current.data==key){
                return true;
            }
            current=current.next;
        }
        return false;
    }
    public ListNode reverse(ListNode head){
        if(head==null){
            return head;
        }
        ListNode current=head;
        ListNode previous=null;
        ListNode next=null;
        while (current!=null){
            next=current.next;
            current.next=previous;
            previous=current;
            current=current.next;
        }
        return previous;
    }
    public static void main(String[] args) {
        sll SLL=new sll();
        SLL.head=new ListNode(10);
        ListNode second=new ListNode(20);
        ListNode third=new ListNode(30);
        ListNode fourth=new ListNode(40);
        SLL.head.next=second;
        second.next=third;
        third.next=fourth;
        fourth.next=null;
        SLL.display();
        System.out.println(SLL.length());
        SLL.insertfirst(256);
        SLL.display();
        SLL.insertLast(476);
        SLL.display();
        SLL.insertatpos(2,26);
        SLL.display();
        SLL.delete(5);
        SLL.display();
        if(SLL.search(26)){
            System.out.println("found");
        }else{
            System.out.println("not found");
        }
    }
}
